// Code generated by MockGen. DO NOT EDIT.
// Source: port.go

// Package mock_akita is a generated GoMock package.
package mock_akita

import (
	gomock "github.com/golang/mock/gomock"
	akita "gitlab.com/akita/akita"
	reflect "reflect"
)

// MockPort is a mock of Port interface
type MockPort struct {
	ctrl     *gomock.Controller
	recorder *MockPortMockRecorder
}

// MockPortMockRecorder is the mock recorder for MockPort
type MockPortMockRecorder struct {
	mock *MockPort
}

// NewMockPort creates a new mock instance
func NewMockPort(ctrl *gomock.Controller) *MockPort {
	mock := &MockPort{ctrl: ctrl}
	mock.recorder = &MockPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPort) EXPECT() *MockPortMockRecorder {
	return m.recorder
}

// SetConnection mocks base method
func (m *MockPort) SetConnection(conn akita.Connection) {
	m.ctrl.Call(m, "SetConnection", conn)
}

// SetConnection indicates an expected call of SetConnection
func (mr *MockPortMockRecorder) SetConnection(conn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnection", reflect.TypeOf((*MockPort)(nil).SetConnection), conn)
}

// Component mocks base method
func (m *MockPort) Component() akita.Component {
	ret := m.ctrl.Call(m, "Component")
	ret0, _ := ret[0].(akita.Component)
	return ret0
}

// Component indicates an expected call of Component
func (mr *MockPortMockRecorder) Component() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Component", reflect.TypeOf((*MockPort)(nil).Component))
}

// Recv mocks base method
func (m *MockPort) Recv(req akita.Req) *akita.SendError {
	ret := m.ctrl.Call(m, "Recv", req)
	ret0, _ := ret[0].(*akita.SendError)
	return ret0
}

// Recv indicates an expected call of Recv
func (mr *MockPortMockRecorder) Recv(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPort)(nil).Recv), req)
}

// NotifyAvailable mocks base method
func (m *MockPort) NotifyAvailable(now akita.VTimeInSec) {
	m.ctrl.Call(m, "NotifyAvailable", now)
}

// NotifyAvailable indicates an expected call of NotifyAvailable
func (mr *MockPortMockRecorder) NotifyAvailable(now interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAvailable", reflect.TypeOf((*MockPort)(nil).NotifyAvailable), now)
}

// Send mocks base method
func (m *MockPort) Send(req akita.Req) *akita.SendError {
	ret := m.ctrl.Call(m, "Send", req)
	ret0, _ := ret[0].(*akita.SendError)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockPortMockRecorder) Send(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPort)(nil).Send), req)
}

// Retrieve mocks base method
func (m *MockPort) Retrieve(now akita.VTimeInSec) akita.Req {
	ret := m.ctrl.Call(m, "Retrieve", now)
	ret0, _ := ret[0].(akita.Req)
	return ret0
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockPortMockRecorder) Retrieve(now interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockPort)(nil).Retrieve), now)
}

// Peek mocks base method
func (m *MockPort) Peek() akita.Req {
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(akita.Req)
	return ret0
}

// Peek indicates an expected call of Peek
func (mr *MockPortMockRecorder) Peek() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockPort)(nil).Peek))
}
