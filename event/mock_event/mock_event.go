// Automatically generated by MockGen. DO NOT EDIT!
// Source: gitlab.com/yaotsu/core/event (interfaces: Event)

package mock_event

import (
	gomock "github.com/golang/mock/gomock"
	event "gitlab.com/yaotsu/core/event"
)

// Mock of Event interface
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *_MockEventRecorder
}

// Recorder for MockEvent (not exported)
type _MockEventRecorder struct {
	mock *MockEvent
}

func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &_MockEventRecorder{mock}
	return mock
}

func (_m *MockEvent) EXPECT() *_MockEventRecorder {
	return _m.recorder
}

func (_m *MockEvent) Happen() {
	_m.ctrl.Call(_m, "Happen")
}

func (_mr *_MockEventRecorder) Happen() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Happen")
}

func (_m *MockEvent) SetTime(_param0 event.VTimeInSec) {
	_m.ctrl.Call(_m, "SetTime", _param0)
}

func (_mr *_MockEventRecorder) SetTime(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTime", arg0)
}

func (_m *MockEvent) Time() event.VTimeInSec {
	ret := _m.ctrl.Call(_m, "Time")
	ret0, _ := ret[0].(event.VTimeInSec)
	return ret0
}

func (_mr *_MockEventRecorder) Time() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Time")
}
